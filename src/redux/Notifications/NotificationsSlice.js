import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import authorizeAxiosInstance from "~/utils/authorizeAxios";

const initialState = {
  currentNotifications: null,
};

export const fetchInvitationsAPI = createAsyncThunk(
  "notifications/fetchInvitationsAPI", // redux s·∫Ω d·ª±a v√†o t√™n n√†y ƒë·ªÉ x√°c ƒë·ªãnh m·ªói action (tr√πng t√™n s·∫Ω hi·ªÉu l·∫ßm l√† c√πng 1 actionya)
  async () => {
    const response = await authorizeAxiosInstance.get("/v1/invitations");

    return response.data;
  }
);

export const updateBoardInvitationAPI = createAsyncThunk(
  "notifications/updateBoardInvitationAPI",
  async ({ status, invitationId }) => {
    console.log("üöÄ ~ status:", status);
    const response = await authorizeAxiosInstance.put(
      `/v1/invitations/board/${invitationId}`,
      { status }
    );
    return response.data;
  }
);

// Kh·ªüi t·∫°o m·ªôt Slice trong kho l∆∞u tr·ªØ - redux store
export const notificationsSlice = createSlice({
  name: "notifications",
  initialState,
  // Reducers: N∆°i x·ª≠ l√Ω d·ªØ li·ªáu ƒë·ªìng b·ªô
  reducers: {
    clearCurrentNotifications: (state) => {
      state.currentNotifications = null;
    },
    updateCurrentNotifications: (state, action) => {
      state.currentNotifications = action.payload;
    },
    // Th√™m m·ªõi m·ªôt b·∫£n ghi notification v√†o ƒë·∫ßu m·∫£ng currentNotifications
    addNotification: (state, action) => {
      const incomingInvitation = action.payload;
      // unshift l√† th√™m ph·∫ßn t·ª≠ v√†o ƒë·∫ßu m·∫£ng, ng∆∞·ª£c l·∫°i v·ªõi push
      state.currentNotifications.unshift(incomingInvitation);
    },
  },

  // ExtraReducers: X·ª≠ l√Ω d·ªØ li·ªáu b·∫•t ƒë·ªìng b·ªô
  extraReducers: (builder) => {
    builder.addCase(fetchInvitationsAPI.fulfilled, (state, action) => {
      let incomingInvitations = action.payload;
      // ƒêo·∫°n n√†y ƒë·∫£o ng∆∞·ª£c l·∫°i m·∫£ng invitations nh·∫≠n ƒë∆∞·ª£c, ƒë∆°n gi·∫£n l√† ƒë·ªÉ hi·ªán th·ªã c√°i m·ªõi nh·∫•t l√™n ƒë·∫ßu
      state.currentNotifications = Array.isArray(incomingInvitations)
        ? incomingInvitations.reverse()
        : [];
    });

    builder.addCase(updateBoardInvitationAPI.fulfilled, (state, action) => {
      const incomingInvitation = action.payload;
      // C·∫≠p nh·∫≠t l·∫°i d·ªØ li·ªáu boardInvitation (b√™n trong n√≥ s·∫Ω c√≥ Status m·ªõi sau khi update)
      const getInvitation = state.currentNotifications.find(
        (i) => i._id === incomingInvitation._id
      );
      getInvitation.boardInvitation = incomingInvitation.boardInvitation;
    });
  },
});

// Action creators are generated for each case reducer function
// Actions: l√† n∆°i d√†nh cho c√°c components b√™n d∆∞·ªõi g·ªçi b·∫±ng dispatch() t·ªõi n√≥ ƒë·ªÉ c·∫≠p nh·∫≠t l·∫°i d·ªØ li·ªáu th√¥ng qua reducer (ch·∫°y ƒë·ªìng b·ªô)
// ƒê·ªÉ √Ω tr√™n th√¨ kh√¥ng th·∫•y properties actions ƒë√¢u c·∫£, b·ªüi v√¨ nh·ªØng c√°i actions n√†y ƒë∆°n gi·∫£n l√† ƒë∆∞·ª£c th·∫±ng redux t·∫°o t·ª± ƒë·ªông theo t√™n c·ªßa reducer nh√©.
export const {
  clearCurrentNotifications,
  updateCurrentNotifications,
  addNotification,
} = notificationsSlice.actions;

// Selectors: L√† n∆°i d√†nh cho c√°c components b√™n d∆∞·ªõi g·ªçi b·∫±ng hook useSelector() ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ trong kho redux store ra s·ª≠ d·ª•ng
export const selectCurrentNotifications = (state) => {
  return state.notifications.currentNotifications;
};

// C√°i file n√†y t√™n l√† notificationsSlice NH∆ØNG ch√∫ng ta s·∫Ω export m·ªôt th·ª© t√™n l√† Reducer, m·ªçi ng∆∞·ªùi l∆∞u √Ω :D
// export default notificationsSlice.reducer.
export const notificationsReducer = notificationsSlice.reducer;
